"""
HORSES:
=================
Сложность: 6
-----------------
Игра "Скачки" - это симуляция забега нескольких лошадей. Игрок делает ставку на одну из лошадей, после чего начинается гонка. Лошади перемещаются случайным образом на каждом шаге, и побеждает та лошадь, которая первой достигнет финиша. Игрок выигрывает, если его лошадь пришла первой.

Правила игры:
1. Игроку предлагается сделать ставку на одну из лошадей (от 1 до 7).
2. После выбора лошади начинается гонка.
3. На каждом шаге гонки каждая лошадь перемещается вперед на случайное количество позиций (от 1 до 3).
4. Гонка продолжается до тех пор, пока какая-либо из лошадей не достигнет финиша (позиция 75).
5. Если лошадь, на которую поставил игрок, побеждает, игрок выигрывает.

-----------------
Алгоритм:
1. Инициализировать массив позиций лошадей, все лошади на старте (позиция 0).
2. Запросить у игрока номер лошади, на которую он делает ставку (от 1 до 7).
3. Начать цикл "пока ни одна из лошадей не достигнет финиша (позиция 75)":
   3.1 Для каждой лошади:
      3.1.1 Сгенерировать случайное число от 1 до 3 (на сколько позиций продвигается лошадь).
      3.1.2 Увеличить позицию лошади на сгенерированное значение.
   3.2 Вывести на экран текущую позицию каждой лошади.
4. Определить номер победившей лошади (первой достигшей финиша).
5. Вывести на экран номер победившей лошади.
6. Если номер победившей лошади совпадает со ставкой игрока, то вывести сообщение "Вы выиграли!". Иначе "Вы проиграли!".
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeHorses["Инициализация позиций лошадей: <code><b>horsePositions = [0, 0, 0, 0, 0, 0, 0]</b></code>"]
    InitializeHorses --> InputBet["Ввод ставки игрока: <code><b>userBet</b></code>"]
    InputBet --> RaceStart{"Начало гонки: пока ни одна из лошадей не достигла финиша (75)"}
    RaceStart -- Да --> LoopHorses{"Для каждой лошади"}
    LoopHorses --> GenerateMove["Сгенерировать случайное смещение (1-3)"]
    GenerateMove --> UpdatePosition["Обновить позицию лошади"]
    UpdatePosition --> CheckFinish{"<code><b>position >= 75?</b></code>"}
    CheckFinish -- Да --> FinishRace["Определить победителя"]
    CheckFinish -- Нет --> OutputPositions["Вывести текущие позиции лошадей"]
    OutputPositions --> RaceStart
    LoopHorses --> CheckFinish
    FinishRace --> OutputWinner["Вывести номер победителя"]
    OutputWinner --> CheckWin["Проверка: <code><b>userBet == winnerHorse?</b></code>"]
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>Вы выиграли!</b>"]
    CheckWin -- Нет --> OutputLose["Вывод сообщения: <b>Вы проиграли!</b>"]
    OutputWin --> End["Конец"]
     OutputLose --> End
     RaceStart -- Нет --> End
```

Legenda:
    Start - Начало игры.
    InitializeHorses - Инициализация массива horsePositions (позиции лошадей) нулями, представляя старт.
    InputBet - Запрос у игрока номера лошади, на которую он ставит.
    RaceStart - Начало цикла гонки, который продолжается, пока ни одна из лошадей не достигнет финиша.
    LoopHorses - Начало цикла, который перебирает всех лошадей.
    GenerateMove - Генерация случайного числа (1-3) для определения смещения лошади.
    UpdatePosition - Обновление текущей позиции лошади в соответствии со сгенерированным смещением.
    CheckFinish - Проверка, достигла ли лошадь финиша (позиция 75).
    OutputPositions - Вывод текущих позиций всех лошадей.
    FinishRace - Определение победителя гонки (первой лошади, достигшей финиша).
    OutputWinner - Вывод номера победившей лошади.
    CheckWin - Проверка, совпадает ли ставка игрока с номером победившей лошади.
    OutputWin - Вывод сообщения "Вы выиграли!", если ставка совпадает с номером победителя.
    OutputLose - Вывод сообщения "Вы проиграли!", если ставка не совпадает с номером победителя.
    End - Конец игры.
"""

import random

# 1. Инициализация массива позиций лошадей (все лошади на старте - позиция 0)
horsePositions = [0, 0, 0, 0, 0, 0, 0]

# 2. Запрос у игрока номера лошади, на которую он делает ставку (от 1 до 7)
while True:
    try:
        userBet = int(input("Сделайте ставку на лошадь (1-7): "))
        if 1 <= userBet <= 7:
            break  # Выход из цикла, если ввод корректный
        else:
            print("Пожалуйста, введите число от 1 до 7.")
    except ValueError:
        print("Пожалуйста, введите целое число.")


# 3. Основной цикл гонки, пока ни одна из лошадей не достигнет финиша (позиция 75)
while max(horsePositions) < 75:
    # 3.1 Для каждой лошади
    for horse in range(len(horsePositions)):
        # 3.1.1 Сгенерировать случайное число от 1 до 3 (на сколько позиций продвигается лошадь)
        move = random.randint(1, 3)
        # 3.1.2 Увеличить позицию лошади на сгенерированное значение
        horsePositions[horse] += move

    # 3.2 Вывести на экран текущую позицию каждой лошади (для наглядности)
    for i, position in enumerate(horsePositions):
        print(f"Лошадь {i + 1}: {'=' * position}{i + 1}")
    print("-" * 30)
# 4. Определить номер победившей лошади (первой достигшей финиша)
winnerHorse = horsePositions.index(max(horsePositions)) + 1
# 5. Вывести на экран номер победившей лошади
print(f"Победила лошадь № {winnerHorse}!")

# 6. Если номер победившей лошади совпадает со ставкой игрока, то вывести сообщение "Вы выиграли!". Иначе "Вы проиграли!".
if winnerHorse == userBet:
    print("Вы выиграли!")
else:
    print("Вы проиграли!")
"""
Объяснение кода:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел, определяющих перемещение лошадей.

2.  **Инициализация переменных**:
    - `horsePositions = [0, 0, 0, 0, 0, 0, 0]`: Создает список (массив) `horsePositions`, представляющий позиции семи лошадей на старте гонки. Начальная позиция всех лошадей — 0.

3.  **Ввод ставки игрока**:
    -   `while True:`: Бесконечный цикл, который продолжается, пока игрок не введет корректную ставку.
    -   `try...except ValueError:`: Блок try-except обрабатывает возможные ошибки ввода, если пользователь введет не целое число.
    -   `userBet = int(input("Сделайте ставку на лошадь (1-7): "))`: Запрашивает у пользователя номер лошади (от 1 до 7), на которую он делает ставку, и преобразует ввод в целое число.
    -   `if 1 <= userBet <= 7:`: Проверяет, является ли введенное число корректным номером лошади.
    -   `break`: Выход из цикла, если ввод корректный.
    -   `print("Пожалуйста, введите число от 1 до 7.")`: Выводит сообщение об ошибке, если введенное число некорректно.

4.  **Основной игровой цикл**:
    -   `while max(horsePositions) < 75:`: Цикл продолжается, пока максимальная позиция среди всех лошадей не достигнет 75 (финишная линия).
    -   `for horse in range(len(horsePositions)):`: Цикл перебирает каждую лошадь в списке `horsePositions`.
    -   `move = random.randint(1, 3)`: Генерирует случайное целое число от 1 до 3, представляющее случайное смещение текущей лошади.
    -   `horsePositions[horse] += move`: Увеличивает позицию текущей лошади на сгенерированное смещение.
    -   `for i, position in enumerate(horsePositions):`: Цикл перебирает позиции всех лошадей для вывода текущей позиции каждой лошади.
    -   `print(f"Лошадь {i + 1}: {'=' * position}{i + 1}")`: Выводит текущую позицию каждой лошади в виде строки, где `=` представляют пройденное расстояние.
    -   `print("-" * 30)`: Выводит разделительную черту между шагами гонки.

5.  **Определение победителя**:
    -   `winnerHorse = horsePositions.index(max(horsePositions)) + 1`: Находит индекс (номер) лошади с максимальной позицией (победителя) и прибавляет 1, так как нумерация лошадей начинается с 1.
    -   `print(f"Победила лошадь № {winnerHorse}!")`: Выводит номер лошади-победителя.

6.  **Определение результата игры**:
    -   `if winnerHorse == userBet:`: Проверяет, совпадает ли номер лошади-победителя со ставкой игрока.
    -   `print("Вы выиграли!")`: Выводит сообщение о выигрыше, если ставка совпадает с номером победителя.
    -   `else: print("Вы проиграли!")`: Выводит сообщение о проигрыше, если ставка не совпадает с номером победителя.
"""
